var FastColors = {}; function loadImageData(e) { return new Promise(function (r, t) { var o = new Image; o ? (o.onload = function (e) { var n = document.createElement("canvas"); if (n) { n.width = o.naturalWidth, n.height = o.naturalHeight; var i = n.getContext("2d"); if (i) { i.drawImage(o, 0, 0, n.width, n.height); var a = i.getImageData(0, 0, n.width, n.height); r(a) } else t("Unable to create context") } else t("Unable to create canvas") }, o.onerror = function (e) { t(e) }, o.onabort = function (e) { t(e) }, o.src = e) : t("Unable to create image") }) } FastColors.loadImageData = loadImageData; var ImageDataPixelBlob = function () { return function (e) { var r = this; this.getPixel = function (e, t) { var o = r.getPixelRGBA(e, t); return new ColorRGBA64(o[0] / 255, o[1] / 255, o[2] / 255, o[3] / 255) }, this.getPixelRGBA = function (e, t) { if (e < 0 || e >= r.width || t < 0 || t >= r.height) throw new Error("Requested pixel is outside of the image bounds"); var o = 4 * (t * r.width + e); return [r.image.data[o], r.image.data[o + 1], r.image.data[o + 2], r.image.data[o + 3]] }, this.image = e, this.width = e.width, this.height = e.height, this.totalPixels = this.width * this.height } }(); FastColors.ImageDataPixelBlob = ImageDataPixelBlob; var Histogram = function () { return function (e, r, t, o) { var n = this; if (void 0 === r && (r = 5), void 0 === t && (t = 5), void 0 === o && (o = null), this.getHistogramIndex = function (e, r, t) { var o = (e << 2 * n.significantBits) + (r << n.significantBits) + t; if (o >= n.data.length) throw new Error("RGB value is outside the bounds of the histogram"); return o }, this.getHistogramValue = function (e, r, t) { return n.data[n.getHistogramIndex(e, r, t)] }, this.setHistogramValue = function (e, r, t, o) { n.data[n.getHistogramIndex(r, t, o)] = e }, r < 1 || r > 8) throw new Error("significantBits must be in the range [1,8]"); if (t < 0) throw new Error("pixelSkipping must be >= 0"); this.significantBits = r; var i = 8 - this.significantBits; this.minRed = 255 >>> i, this.maxRed = 0, this.minGreen = 255 >>> i, this.maxGreen = 0, this.minBlue = 255 >>> i, this.maxBlue = 0; var a = 1 << 3 * r; this.data = new Uint32Array(a), this.data.fill(0), this.total = 0; for (var l = 0, s = 0; s < e.height; s++)for (var u = 0; u < e.width; u++)if (!(t > 0 && l++ % t != 0)) { var g = e.getPixelRGBA(u, s); if (null === o || o(g)) { g[0] = g[0] >>> i, g[1] = g[1] >>> i, g[2] = g[2] >>> i, this.minRed = Math.min(g[0], this.minRed), this.maxRed = Math.max(g[0], this.maxRed), this.minGreen = Math.min(g[1], this.minGreen), this.maxGreen = Math.max(g[1], this.maxGreen), this.minBlue = Math.min(g[2], this.minBlue), this.maxBlue = Math.max(g[2], this.maxBlue); var c = this.getHistogramIndex(g[0], g[1], g[2]); this.data[c] += 1, this.total++ } } } }(); function countValidBoxes(e, r) { if (null === r) return e.length; for (var t = 0, o = 0; o < e.length; o++)r(e[o]) && t++; return t } function quantizeHistogram(e, r) { void 0 === r && (r = FastColors.defaultQuantizeConfig); for (var t = [new PixelBox(e, e.minRed, e.maxRed, e.minGreen, e.maxGreen, e.minBlue, e.maxBlue)], o = countValidBoxes(t, r.isBoxValid), n = Math.floor(r.targetPaletteSize * r.fractionByPopulation), i = function (e) { return e.pixelCount }, a = 0; a <= r.maxIterations;) { if (t.length > 0) null !== (s = t.shift().modifiedMedianCut())[0] && insertIntoSortedList(t, s[0], i), null !== s[1] && insertIntoSortedList(t, s[1], i); if ((o = countValidBoxes(t, r.isBoxValid)) >= n || t.length <= 1) break; a++ } if (o < r.targetPaletteSize) { var l = function (e) { return e.pixelCount * e.colorVolume }; for (t.sort(function (e, r) { var t = l(e), o = l(r); return t === o ? 0 : t > o ? -1 : 1 }), a = 0; a <= r.maxIterations;) { var s; if (t.length > 0) null !== (s = t.shift().modifiedMedianCut())[0] && insertIntoSortedList(t, s[0], l), null !== s[1] && insertIntoSortedList(t, s[1], l); if ((o = countValidBoxes(t, r.isBoxValid)) >= r.targetPaletteSize || t.length <= 1) break; a++ } } for (var u = new Array(o), g = 0, c = 0; c < t.length; c++)r.isBoxValid && !r.isBoxValid(t[c]) || (u[g] = { color: t[c].averageColor, pixelCount: t[c].pixelCount, colorVolume: t[c].colorVolume }, g++); return u } function quantize(e, r) { return void 0 === r && (r = FastColors.defaultQuantizeConfig), quantizeHistogram(new Histogram(e, r.significantBits, r.pixelSkipping, r.isHistogramPixelValid), r) } function clamp(e, r, t) { return isNaN(e) || e <= r ? r : e >= t ? t : e } function normalize(e, r, t) { return isNaN(e) || e <= r ? 0 : e >= t ? 1 : e / (t - r) } function denormalize(e, r, t) { return isNaN(e) ? r : r + e * (t - r) } function degreesToRadians(e) { return e * (Math.PI / 180) } function radiansToDegrees(e) { return e * (180 / Math.PI) } function getHexStringForByte(e) { var r = Math.round(clamp(e, 0, 255)).toString(16); return 1 === r.length ? "0" + r : r } function lerp(e, r, t) { return isNaN(e) || e <= 0 ? r : e >= 1 ? t : r + e * (t - r) } function lerpAnglesInDegrees(e, r, t) { if (e <= 0) return r % 360; if (e >= 1) return t % 360; var o = (r - t + 360) % 360; return o <= (t - r + 360) % 360 ? (r - o * e + 360) % 360 : (r + o * e + 360) % 360 } FastColors.Histogram = Histogram, FastColors.defaultQuantizeConfig = { significantBits: 5, pixelSkipping: 5, targetPaletteSize: 64, fractionByPopulation: .85, isBoxValid: function (e) { return !(e.pixelCount < 5) }, isHistogramPixelValid: function (e) { return !(e[3] < 128) }, maxIterations: 1e3 }, FastColors.quantizeHistogram = quantizeHistogram, FastColors.quantize = quantize, FastColors.clamp = clamp, FastColors.normalize = normalize, FastColors.denormalize = denormalize, FastColors.degreesToRadians = degreesToRadians, FastColors.radiansToDegrees = radiansToDegrees, FastColors.getHexStringForByte = getHexStringForByte, FastColors.lerp = lerp, FastColors.lerpAnglesInDegrees = lerpAnglesInDegrees; var TwoPI = 2 * Math.PI; function lerpAnglesInRadians(e, r, t) { if (isNaN(e) || e <= 0) return r % TwoPI; if (e >= 1) return t % TwoPI; var o = (r - t + TwoPI) % TwoPI; return o <= (t - r + TwoPI) % TwoPI ? (r - o * e + TwoPI) % TwoPI : (r + o * e + TwoPI) % TwoPI } function roundToPrecisionSmall(e, r) { var t = Math.pow(10, r); return Math.round(e * t) / t } FastColors.lerpAnglesInRadians = lerpAnglesInRadians, FastColors.roundToPrecisionSmall = roundToPrecisionSmall; var ColorRGBA64 = function () { function e(e, r, t, o) { this.r = e, this.g = r, this.b = t, this.a = "number" != typeof o || isNaN(o) ? 1 : o } return e.fromObject = function (r) { return !r || isNaN(r.r) || isNaN(r.g) || isNaN(r.b) ? null : new e(r.r, r.g, r.b, r.a) }, e.prototype.equalValue = function (e) { return this.r === e.r && this.g === e.g && this.b === e.b && this.a === e.a }, e.prototype.toStringHexRGB = function () { return "#" + [this.r, this.g, this.b].map(this.formatHexValue).join("") }, e.prototype.toStringHexRGBA = function () { return this.toStringHexRGB() + this.formatHexValue(this.a) }, e.prototype.toStringHexARGB = function () { return "#" + [this.a, this.r, this.g, this.b].map(this.formatHexValue).join("") }, e.prototype.toStringWebRGB = function () { return "rgb(" + Math.round(denormalize(this.r, 0, 255)) + "," + Math.round(denormalize(this.g, 0, 255)) + "," + Math.round(denormalize(this.b, 0, 255)) + ")" }, e.prototype.toStringWebRGBA = function () { return "rgba(" + Math.round(denormalize(this.r, 0, 255)) + "," + Math.round(denormalize(this.g, 0, 255)) + "," + Math.round(denormalize(this.b, 0, 255)) + "," + clamp(this.a, 0, 1) + ")" }, e.prototype.roundToPrecision = function (r) { return new e(roundToPrecisionSmall(this.r, r), roundToPrecisionSmall(this.g, r), roundToPrecisionSmall(this.b, r), roundToPrecisionSmall(this.a, r)) }, e.prototype.clamp = function () { return new e(clamp(this.r, 0, 1), clamp(this.g, 0, 1), clamp(this.b, 0, 1), clamp(this.a, 0, 1)) }, e.prototype.toObject = function () { return { r: this.r, g: this.g, b: this.b, a: this.a } }, e.prototype.formatHexValue = function (e) { return getHexStringForByte(denormalize(e, 0, 255)) }, e }(); function insertIntoSortedList(e, r, t) { if (0 !== e.length) { var o = t(r); if (o > t(e[0])) e.unshift(r); else if (o <= t(e[e.length - 1])) e.push(r); else { for (var n = 0, i = 0; i < e.length; i++)if (o > t(e[i])) { n = i; break } e.splice(n, 0, r) } } else e.push(r) } FastColors.ColorRGBA64 = ColorRGBA64, FastColors.insertIntoSortedList = insertIntoSortedList; var PixelBox = function () { return function e(r, t, o, n, i, a, l) { var s = this; this.modifiedMedianCut = function () { if (1 === s.rangeRed && 1 === s.rangeGreen && 1 === s.rangeBlue) return [s, null]; var r, t, o; !function (e) { e[e.Red = 0] = "Red", e[e.Green = 1] = "Green", e[e.Blue = 2] = "Blue" }(r || (r = {})), s.rangeRed >= s.rangeGreen && s.rangeRed >= s.rangeBlue ? (t = r.Red, o = s.rangeRed) : s.rangeGreen >= s.rangeRed && s.rangeGreen >= s.rangeBlue ? (t = r.Green, o = s.rangeGreen) : (t = r.Blue, o = s.rangeBlue); var n = new Array(o), i = new Array(o), a = null, l = null, u = 0; if (t === r.Red) { for (var g = s.minRed; g <= s.maxRed; g++) { for (var c = 0, h = s.minGreen; h <= s.maxGreen; h++)for (var d = s.minBlue; d <= s.maxBlue; d++)c += s.globalHistogram.getHistogramValue(g, h, d); u += c, n[g - s.minRed] = u } for (var C = 0; C < n.length; C++)i[C] = u - n[C]; for (g = s.minRed; g <= s.maxRed; g++)if (n[g - s.minRed] >= u / 2) { var m = void 0; for (m = (b = g - s.minRed) <= (p = s.maxRed - g) ? Math.min(s.maxRed - 1, Math.floor(g + p / 2)) : Math.max(s.minRed, Math.floor(g - 1 - b / 2)); n[m - s.minRed] <= 0 && m < s.maxRed - 1;)m++; for (var f = i[m - s.minRed]; 0 === f && m > s.minRed && 0 !== n[m - s.minRed - 1];)f = i[--m - s.minRed]; a = new e(s.globalHistogram, s.minRed, m, s.minGreen, s.maxGreen, s.minBlue, s.maxBlue), l = new e(s.globalHistogram, m + 1, s.maxRed, s.minGreen, s.maxGreen, s.minBlue, s.maxBlue); break } } else if (t === r.Green) { for (h = s.minGreen; h <= s.maxGreen; h++) { for (c = 0, g = s.minRed; g <= s.maxRed; g++)for (d = s.minBlue; d <= s.maxBlue; d++)c += s.globalHistogram.getHistogramValue(g, h, d); u += c, n[h - s.minGreen] = u } for (C = 0; C < n.length; C++)i[C] = u - n[C]; for (h = s.minGreen; h <= s.maxGreen; h++)if (n[h - s.minGreen] >= u / 2) { for (m = void 0, m = (b = h - s.minGreen) <= (p = s.maxGreen - h) ? Math.min(s.maxGreen - 1, Math.floor(h + p / 2)) : Math.max(s.minGreen, Math.floor(h - 1 - b / 2)); n[m - s.minGreen] <= 0 && m < s.maxGreen - 1;)m++; for (f = i[m - s.minGreen]; 0 === f && m > s.minGreen && 0 !== n[m - s.minGreen - 1];)f = i[--m - s.minGreen]; a = new e(s.globalHistogram, s.minRed, s.maxRed, s.minGreen, m, s.minBlue, s.maxBlue), l = new e(s.globalHistogram, s.minRed, s.maxRed, m + 1, s.maxGreen, s.minBlue, s.maxBlue); break } } else { for (d = s.minBlue; d <= s.maxBlue; d++) { for (c = 0, g = s.minRed; g <= s.maxRed; g++)for (h = s.minGreen; h <= s.maxGreen; h++)c += s.globalHistogram.getHistogramValue(g, h, d); u += c, n[d - s.minBlue] = u } for (C = 0; C < n.length; C++)i[C] = u - n[C]; for (d = s.minBlue; d <= s.maxBlue; d++)if (n[d - s.minBlue] >= u / 2) { var b, p; for (m = void 0, m = (b = d - s.minBlue) <= (p = s.maxBlue - d) ? Math.min(s.maxBlue - 1, Math.floor(d + p / 2)) : Math.max(s.minBlue, Math.floor(d - 1 - b / 2)); n[m - s.minBlue] <= 0 && m < s.maxBlue - 1;)m++; for (f = i[m - s.minBlue]; 0 === f && m > s.minBlue && 0 !== n[m - s.minBlue - 1];)f = i[--m - s.minBlue]; a = new e(s.globalHistogram, s.minRed, s.maxRed, s.minGreen, s.maxGreen, s.minBlue, m), l = new e(s.globalHistogram, s.minRed, s.maxRed, s.minGreen, s.maxGreen, m + 1, s.maxBlue); break } } return [a, l] }, this.pixelCount = 0, this.globalHistogram = r, this.minRed = t, this.maxRed = o, this.minGreen = n, this.maxGreen = i, this.minBlue = a, this.maxBlue = l, this.rangeRed = this.maxRed - this.minRed + 1, this.rangeGreen = this.maxGreen - this.minGreen + 1, this.rangeBlue = this.maxBlue - this.minBlue + 1, this.colorVolume = this.rangeRed * this.rangeGreen * this.rangeBlue; for (var u = 0, g = 0, c = 0, h = 1 << 8 - this.globalHistogram.significantBits, d = t; d <= o; d++)for (var C = n; C <= i; C++)for (var m = a; m <= l; m++) { var f = this.globalHistogram.getHistogramValue(d, C, m); this.pixelCount += f, u += f * (d + .5) * h, g += f * (C + .5) * h, c += f * (m + .5) * h } 0 === this.pixelCount ? this.averageColor = new ColorRGBA64(h * ((t + o + 1) / 2) / 255, h * ((n + i + 1) / 2) / 255, h * ((a + l + 1) / 2) / 255, 1) : this.averageColor = new ColorRGBA64(u / this.pixelCount / 255, g / this.pixelCount / 255, c / this.pixelCount / 255, 1) } }(); FastColors.PixelBox = PixelBox, FastColors.defaultPaletteExtractionConfig = { saturationWeight: 6, luminosityWeight: 3, populationWeight: 1, volumeWeight: .1, constraints: [{ id: "Vibrant", targetSaturation: 1, minSaturation: .35, maxSaturation: 1, targetLuminosity: .5, minLuminosity: .3, maxLuminosity: .7 }, { id: "LightVibrant", targetSaturation: 1, minSaturation: .35, maxSaturation: 1, targetLuminosity: .74, minLuminosity: .55, maxLuminosity: 1 }, { id: "DarkVibrant", targetSaturation: 1, minSaturation: .35, maxSaturation: 1, targetLuminosity: .26, minLuminosity: 0, maxLuminosity: .45 }, { id: "Muted", targetSaturation: .3, minSaturation: 0, maxSaturation: .4, targetLuminosity: .5, minLuminosity: .3, maxLuminosity: .7 }, { id: "LightMuted", targetSaturation: .3, minSaturation: 0, maxSaturation: .4, targetLuminosity: .74, minLuminosity: .55, maxLuminosity: 1 }, { id: "DarkMuted", targetSaturation: .3, minSaturation: 0, maxSaturation: .4, targetLuminosity: .26, minLuminosity: 0, maxLuminosity: .45 }] }; var ColorHSL = function () { function e(e, r, t) { this.h = e, this.s = r, this.l = t } return e.fromObject = function (r) { return !r || isNaN(r.h) || isNaN(r.s) || isNaN(r.l) ? null : new e(r.h, r.s, r.l) }, e.prototype.equalValue = function (e) { return this.h === e.h && this.s === e.s && this.l === e.l }, e.prototype.roundToPrecision = function (r) { return new e(roundToPrecisionSmall(this.h, r), roundToPrecisionSmall(this.s, r), roundToPrecisionSmall(this.l, r)) }, e.prototype.toObject = function () { return { h: this.h, s: this.s, l: this.l } }, e }(); FastColors.ColorHSL = ColorHSL; var ColorHSV = function () { function e(e, r, t) { this.h = e, this.s = r, this.v = t } return e.fromObject = function (r) { return !r || isNaN(r.h) || isNaN(r.s) || isNaN(r.v) ? null : new e(r.h, r.s, r.v) }, e.prototype.equalValue = function (e) { return this.h === e.h && this.s === e.s && this.v === e.v }, e.prototype.roundToPrecision = function (r) { return new e(roundToPrecisionSmall(this.h, r), roundToPrecisionSmall(this.s, r), roundToPrecisionSmall(this.v, r)) }, e.prototype.toObject = function () { return { h: this.h, s: this.s, v: this.v } }, e }(); FastColors.ColorHSV = ColorHSV; var ColorLAB = function () { function e(e, r, t) { this.l = e, this.a = r, this.b = t } return e.fromObject = function (r) { return !r || isNaN(r.l) || isNaN(r.a) || isNaN(r.b) ? null : new e(r.l, r.a, r.b) }, e.prototype.equalValue = function (e) { return this.l === e.l && this.a === e.a && this.b === e.b }, e.prototype.roundToPrecision = function (r) { return new e(roundToPrecisionSmall(this.l, r), roundToPrecisionSmall(this.a, r), roundToPrecisionSmall(this.b, r)) }, e.prototype.toObject = function () { return { l: this.l, a: this.a, b: this.b } }, e.epsilon = 216 / 24389, e.kappa = 24389 / 27, e }(); FastColors.ColorLAB = ColorLAB; var ColorLCH = function () { function e(e, r, t) { this.l = e, this.c = r, this.h = t } return e.fromObject = function (r) { return !r || isNaN(r.l) || isNaN(r.c) || isNaN(r.h) ? null : new e(r.l, r.c, r.h) }, e.prototype.equalValue = function (e) { return this.l === e.l && this.c === e.c && this.h === e.h }, e.prototype.roundToPrecision = function (r) { return new e(roundToPrecisionSmall(this.l, r), roundToPrecisionSmall(this.c, r), roundToPrecisionSmall(this.h, r)) }, e.prototype.toObject = function () { return { l: this.l, c: this.c, h: this.h } }, e }(); FastColors.ColorLCH = ColorLCH; var ColorXYZ = function () { function e(e, r, t) { this.x = e, this.y = r, this.z = t } return e.fromObject = function (r) { return !r || isNaN(r.x) || isNaN(r.y) || isNaN(r.z) ? null : new e(r.x, r.y, r.z) }, e.prototype.equalValue = function (e) { return this.x === e.x && this.y === e.y && this.z === e.z }, e.prototype.roundToPrecision = function (r) { return new e(roundToPrecisionSmall(this.x, r), roundToPrecisionSmall(this.y, r), roundToPrecisionSmall(this.z, r)) }, e.prototype.toObject = function () { return { x: this.x, y: this.y, z: this.z } }, e.whitePoint = new e(.95047, 1, 1.08883), e }(); function rgbToLinearLuminance(e) { return .2126 * e.r + .7152 * e.g + .0722 * e.b } function rgbToRelativeLuminance(e) { function r(e) { return e <= .03928 ? e / 12.92 : Math.pow((e + .055) / 1.055, 2.4) } return rgbToLinearLuminance(new ColorRGBA64(r(e.r), r(e.g), r(e.b), 1)) } FastColors.ColorXYZ = ColorXYZ, FastColors.rgbToLinearLuminance = rgbToLinearLuminance, FastColors.rgbToRelativeLuminance = rgbToRelativeLuminance; var calculateContrastRatio = function (e, r) { return (e + .05) / (r + .05) }; function contrastRatio(e, r) { var t = rgbToRelativeLuminance(e), o = rgbToRelativeLuminance(r); return t > o ? calculateContrastRatio(t, o) : calculateContrastRatio(o, t) } function calculateOverlayColor(e, r, t) { var o = ((e.r - r.r) / (t.r - r.r) + (e.g - r.g) / (t.g - r.g) + (e.b - r.b) / (t.b - r.b)) / 3; return new ColorRGBA64(t.r, t.g, t.b, o) } function rgbToHSL(e) { var r = Math.max(e.r, e.g, e.b), t = Math.min(e.r, e.g, e.b), o = r - t, n = 0; 0 !== o && (n = r === e.r ? (e.g - e.b) / o % 6 * 60 : r === e.g ? 60 * ((e.b - e.r) / o + 2) : 60 * ((e.r - e.g) / o + 4)), n < 0 && (n += 360); var i = (r + t) / 2, a = 0; return 0 !== o && (a = o / (1 - Math.abs(2 * i - 1))), new ColorHSL(n, a, i) } function hslToRGB(e, r) { void 0 === r && (r = 1); var t = (1 - Math.abs(2 * e.l - 1)) * e.s, o = t * (1 - Math.abs(e.h / 60 % 2 - 1)), n = e.l - t / 2, i = 0, a = 0, l = 0; return e.h < 60 ? (i = t, a = o, l = 0) : e.h < 120 ? (i = o, a = t, l = 0) : e.h < 180 ? (i = 0, a = t, l = o) : e.h < 240 ? (i = 0, a = o, l = t) : e.h < 300 ? (i = o, a = 0, l = t) : e.h < 360 && (i = t, a = 0, l = o), new ColorRGBA64(i + n, a + n, l + n, r) } function rgbToHSV(e) { var r = Math.max(e.r, e.g, e.b), t = r - Math.min(e.r, e.g, e.b), o = 0; 0 !== t && (o = r === e.r ? (e.g - e.b) / t % 6 * 60 : r === e.g ? 60 * ((e.b - e.r) / t + 2) : 60 * ((e.r - e.g) / t + 4)), o < 0 && (o += 360); var n = 0; return 0 !== r && (n = t / r), new ColorHSV(o, n, r) } function hsvToRGB(e, r) { void 0 === r && (r = 1); var t = e.s * e.v, o = t * (1 - Math.abs(e.h / 60 % 2 - 1)), n = e.v - t, i = 0, a = 0, l = 0; return e.h < 60 ? (i = t, a = o, l = 0) : e.h < 120 ? (i = o, a = t, l = 0) : e.h < 180 ? (i = 0, a = t, l = o) : e.h < 240 ? (i = 0, a = o, l = t) : e.h < 300 ? (i = o, a = 0, l = t) : e.h < 360 && (i = t, a = 0, l = o), new ColorRGBA64(i + n, a + n, l + n, r) } function lchToLAB(e) { var r = 0, t = 0; return 0 !== e.h && (r = Math.cos(degreesToRadians(e.h)) * e.c, t = Math.sin(degreesToRadians(e.h)) * e.c), new ColorLAB(e.l, r, t) } function labToLCH(e) { var r = 0; (Math.abs(e.b) > .001 || Math.abs(e.a) > .001) && (r = radiansToDegrees(Math.atan2(e.b, e.a))), r < 0 && (r += 360); var t = Math.sqrt(e.a * e.a + e.b * e.b); return new ColorLCH(e.l, t, r) } function labToXYZ(e) { var r = (e.l + 16) / 116, t = r + e.a / 500, o = r - e.b / 200, n = Math.pow(t, 3), i = Math.pow(r, 3), a = Math.pow(o, 3), l = 0; l = n > ColorLAB.epsilon ? n : (116 * t - 16) / ColorLAB.kappa; var s = 0; s = e.l > ColorLAB.epsilon * ColorLAB.kappa ? i : e.l / ColorLAB.kappa; var u = 0; return u = a > ColorLAB.epsilon ? a : (116 * o - 16) / ColorLAB.kappa, l = ColorXYZ.whitePoint.x * l, s = ColorXYZ.whitePoint.y * s, u = ColorXYZ.whitePoint.z * u, new ColorXYZ(l, s, u) } function xyzToLAB(e) { function r(e) { return e > ColorLAB.epsilon ? Math.pow(e, 1 / 3) : (ColorLAB.kappa * e + 16) / 116 } var t = r(e.x / ColorXYZ.whitePoint.x), o = r(e.y / ColorXYZ.whitePoint.y), n = r(e.z / ColorXYZ.whitePoint.z); return new ColorLAB(116 * o - 16, 500 * (t - o), 200 * (o - n)) } function rgbToXYZ(e) { function r(e) { return e <= .04045 ? e / 12.92 : Math.pow((e + .055) / 1.055, 2.4) } var t = r(e.r), o = r(e.g), n = r(e.b); return new ColorXYZ(.4124564 * t + .3575761 * o + .1804375 * n, .2126729 * t + .7151522 * o + .072175 * n, .0193339 * t + .119192 * o + .9503041 * n) } function xyzToRGB(e, r) { function t(e) { return e <= .0031308 ? 12.92 * e : 1.055 * Math.pow(e, 1 / 2.4) - .055 } void 0 === r && (r = 1); var o = t(3.2404542 * e.x - 1.5371385 * e.y - .4985314 * e.z), n = t(-.969266 * e.x + 1.8760108 * e.y + .041556 * e.z), i = t(.0556434 * e.x - .2040259 * e.y + 1.0572252 * e.z); return new ColorRGBA64(o, n, i, r) } function rgbToLAB(e) { return xyzToLAB(rgbToXYZ(e)) } function labToRGB(e, r) { return void 0 === r && (r = 1), xyzToRGB(labToXYZ(e), r) } function rgbToLCH(e) { return labToLCH(rgbToLAB(e)) } function lchToRGB(e, r) { return void 0 === r && (r = 1), labToRGB(lchToLAB(e), r) } function temperatureToRGB(e, r) { void 0 === r && (r = 1); var t = 0, o = 0, n = 0; return e <= 1e3 ? e = 1e3 : e >= 4e4 && (e = 4e4), e < 6600 ? (t = 255, o = -155.25485562709179 - .44596950469579133 * (o = e / 100 - 2) + 104.49216199393888 * Math.log(o)) : (t = 351.97690566805693 + .114206453784165 * (t = e / 100 - 55) - 40.25366309332127 * Math.log(t), o = 325.4494125711974 + .07943456536662342 * (o = e / 100 - 50) - 28.0852963507957 * Math.log(o)), n = e >= 6600 ? 255 : e < 2e3 ? 0 : .8274096064007395 * (n = e / 100 - 10) - 254.76935184120902 + 115.67994401066147 * Math.log(n), new ColorRGBA64(t / 255, o / 255, n / 255, r) } function rgbToTemperature(e) { for (var r = 0, t = 1e3, o = 4e4; o - t > .4;) { var n = temperatureToRGB(r = (o + t) / 2); n.b / n.r >= e.b / e.r ? o = r : t = r } return Math.round(r) } function cloneHSLFilter(e) { return null === e ? null : { invert: e.invert, minH: e.minH, maxH: e.maxH, minS: e.minS, maxS: e.maxS, minL: e.minL, maxL: e.maxL, id: e.id } } function cloneHSLFilterList(e) { for (var r = [], t = 0; t < e.length; t++)r.push(cloneHSLFilter(e[t])); return r } function checkHSLFilter(e, r) { var t = !0; return void 0 !== r.minH && e.h < r.minH && (t = !1), void 0 !== r.maxH && e.h > r.maxH && (t = !1), void 0 !== r.minS && e.s < r.minS && (t = !1), void 0 !== r.maxS && e.s > r.maxS && (t = !1), void 0 !== r.minL && e.l < r.minL && (t = !1), void 0 !== r.maxL && e.l > r.maxL && (t = !1), !0 === r.invert ? !t : t } function cloneLABFilter(e) { return null === e ? null : { invert: e.invert, minL: e.minL, maxL: e.maxL, minA: e.minA, maxA: e.maxA, minB: e.minB, maxB: e.maxB, minABRadius: e.minABRadius, maxABRadius: e.maxABRadius, id: e.id } } function cloneLABFilterList(e) { for (var r = [], t = 0; t < e.length; t++)r.push(cloneLABFilter(e[t])); return r } function checkLABFilter(e, r) { var t = !0; if (void 0 !== r.minL && e.l < r.minL && (t = !1), void 0 !== r.maxL && e.l > r.maxL && (t = !1), void 0 !== r.minA && e.a < r.minA && (t = !1), void 0 !== r.maxA && e.a > r.maxA && (t = !1), void 0 !== r.minB && e.b < r.minB && (t = !1), void 0 !== r.maxB && e.b > r.maxB && (t = !1), void 0 !== r.maxABRadius || void 0 !== r.minABRadius) { var o = Math.sqrt(Math.pow(e.a, 2) + Math.pow(e.b, 2)); if (void 0 !== r.minABRadius && o < r.minABRadius) return !1; if (void 0 !== r.maxABRadius && o > r.maxABRadius) return !1 } return !0 === r.invert ? !t : t } FastColors.contrastRatio = contrastRatio, FastColors.calculateOverlayColor = calculateOverlayColor, FastColors.rgbToHSL = rgbToHSL, FastColors.hslToRGB = hslToRGB, FastColors.rgbToHSV = rgbToHSV, FastColors.hsvToRGB = hsvToRGB, FastColors.lchToLAB = lchToLAB, FastColors.labToLCH = labToLCH, FastColors.labToXYZ = labToXYZ, FastColors.xyzToLAB = xyzToLAB, FastColors.rgbToXYZ = rgbToXYZ, FastColors.xyzToRGB = xyzToRGB, FastColors.rgbToLAB = rgbToLAB, FastColors.labToRGB = labToRGB, FastColors.rgbToLCH = rgbToLCH, FastColors.lchToRGB = lchToRGB, FastColors.temperatureToRGB = temperatureToRGB, FastColors.rgbToTemperature = rgbToTemperature, FastColors.cloneHSLFilter = cloneHSLFilter, FastColors.cloneHSLFilterList = cloneHSLFilterList, FastColors.checkHSLFilter = checkHSLFilter, FastColors.cloneLABFilter = cloneLABFilter, FastColors.cloneLABFilterList = cloneLABFilterList, FastColors.checkLABFilter = checkLABFilter, FastColors.murkZoneFilter = { minL: 25, maxL: 75, maxABRadius: 30 }, FastColors.namedColorsConfigs = { aliceblue: { r: .941176, g: .972549, b: 1 }, antiquewhite: { r: .980392, g: .921569, b: .843137 }, aqua: { r: 0, g: 1, b: 1 }, aquamarine: { r: .498039, g: 1, b: .831373 }, azure: { r: .941176, g: 1, b: 1 }, beige: { r: .960784, g: .960784, b: .862745 }, bisque: { r: 1, g: .894118, b: .768627 }, black: { r: 0, g: 0, b: 0 }, blanchedalmond: { r: 1, g: .921569, b: .803922 }, blue: { r: 0, g: 0, b: 1 }, blueviolet: { r: .541176, g: .168627, b: .886275 }, brown: { r: .647059, g: .164706, b: .164706 }, burlywood: { r: .870588, g: .721569, b: .529412 }, cadetblue: { r: .372549, g: .619608, b: .627451 }, chartreuse: { r: .498039, g: 1, b: 0 }, chocolate: { r: .823529, g: .411765, b: .117647 }, coral: { r: 1, g: .498039, b: .313725 }, cornflowerblue: { r: .392157, g: .584314, b: .929412 }, cornsilk: { r: 1, g: .972549, b: .862745 }, crimson: { r: .862745, g: .078431, b: .235294 }, cyan: { r: 0, g: 1, b: 1 }, darkblue: { r: 0, g: 0, b: .545098 }, darkcyan: { r: 0, g: .545098, b: .545098 }, darkgoldenrod: { r: .721569, g: .52549, b: .043137 }, darkgray: { r: .662745, g: .662745, b: .662745 }, darkgreen: { r: 0, g: .392157, b: 0 }, darkgrey: { r: .662745, g: .662745, b: .662745 }, darkkhaki: { r: .741176, g: .717647, b: .419608 }, darkmagenta: { r: .545098, g: 0, b: .545098 }, darkolivegreen: { r: .333333, g: .419608, b: .184314 }, darkorange: { r: 1, g: .54902, b: 0 }, darkorchid: { r: .6, g: .196078, b: .8 }, darkred: { r: .545098, g: 0, b: 0 }, darksalmon: { r: .913725, g: .588235, b: .478431 }, darkseagreen: { r: .560784, g: .737255, b: .560784 }, darkslateblue: { r: .282353, g: .239216, b: .545098 }, darkslategray: { r: .184314, g: .309804, b: .309804 }, darkslategrey: { r: .184314, g: .309804, b: .309804 }, darkturquoise: { r: 0, g: .807843, b: .819608 }, darkviolet: { r: .580392, g: 0, b: .827451 }, deeppink: { r: 1, g: .078431, b: .576471 }, deepskyblue: { r: 0, g: .74902, b: 1 }, dimgray: { r: .411765, g: .411765, b: .411765 }, dimgrey: { r: .411765, g: .411765, b: .411765 }, dodgerblue: { r: .117647, g: .564706, b: 1 }, firebrick: { r: .698039, g: .133333, b: .133333 }, floralwhite: { r: 1, g: .980392, b: .941176 }, forestgreen: { r: .133333, g: .545098, b: .133333 }, fuchsia: { r: 1, g: 0, b: 1 }, gainsboro: { r: .862745, g: .862745, b: .862745 }, ghostwhite: { r: .972549, g: .972549, b: 1 }, gold: { r: 1, g: .843137, b: 0 }, goldenrod: { r: .854902, g: .647059, b: .12549 }, gray: { r: .501961, g: .501961, b: .501961 }, green: { r: 0, g: .501961, b: 0 }, greenyellow: { r: .678431, g: 1, b: .184314 }, grey: { r: .501961, g: .501961, b: .501961 }, honeydew: { r: .941176, g: 1, b: .941176 }, hotpink: { r: 1, g: .411765, b: .705882 }, indianred: { r: .803922, g: .360784, b: .360784 }, indigo: { r: .294118, g: 0, b: .509804 }, ivory: { r: 1, g: 1, b: .941176 }, khaki: { r: .941176, g: .901961, b: .54902 }, lavender: { r: .901961, g: .901961, b: .980392 }, lavenderblush: { r: 1, g: .941176, b: .960784 }, lawngreen: { r: .486275, g: .988235, b: 0 }, lemonchiffon: { r: 1, g: .980392, b: .803922 }, lightblue: { r: .678431, g: .847059, b: .901961 }, lightcoral: { r: .941176, g: .501961, b: .501961 }, lightcyan: { r: .878431, g: 1, b: 1 }, lightgoldenrodyellow: { r: .980392, g: .980392, b: .823529 }, lightgray: { r: .827451, g: .827451, b: .827451 }, lightgreen: { r: .564706, g: .933333, b: .564706 }, lightgrey: { r: .827451, g: .827451, b: .827451 }, lightpink: { r: 1, g: .713725, b: .756863 }, lightsalmon: { r: 1, g: .627451, b: .478431 }, lightseagreen: { r: .12549, g: .698039, b: .666667 }, lightskyblue: { r: .529412, g: .807843, b: .980392 }, lightslategray: { r: .466667, g: .533333, b: .6 }, lightslategrey: { r: .466667, g: .533333, b: .6 }, lightsteelblue: { r: .690196, g: .768627, b: .870588 }, lightyellow: { r: 1, g: 1, b: .878431 }, lime: { r: 0, g: 1, b: 0 }, limegreen: { r: .196078, g: .803922, b: .196078 }, linen: { r: .980392, g: .941176, b: .901961 }, magenta: { r: 1, g: 0, b: 1 }, maroon: { r: .501961, g: 0, b: 0 }, mediumaquamarine: { r: .4, g: .803922, b: .666667 }, mediumblue: { r: 0, g: 0, b: .803922 }, mediumorchid: { r: .729412, g: .333333, b: .827451 }, mediumpurple: { r: .576471, g: .439216, b: .858824 }, mediumseagreen: { r: .235294, g: .701961, b: .443137 }, mediumslateblue: { r: .482353, g: .407843, b: .933333 }, mediumspringgreen: { r: 0, g: .980392, b: .603922 }, mediumturquoise: { r: .282353, g: .819608, b: .8 }, mediumvioletred: { r: .780392, g: .082353, b: .521569 }, midnightblue: { r: .098039, g: .098039, b: .439216 }, mintcream: { r: .960784, g: 1, b: .980392 }, mistyrose: { r: 1, g: .894118, b: .882353 }, moccasin: { r: 1, g: .894118, b: .709804 }, navajowhite: { r: 1, g: .870588, b: .678431 }, navy: { r: 0, g: 0, b: .501961 }, oldlace: { r: .992157, g: .960784, b: .901961 }, olive: { r: .501961, g: .501961, b: 0 }, olivedrab: { r: .419608, g: .556863, b: .137255 }, orange: { r: 1, g: .647059, b: 0 }, orangered: { r: 1, g: .270588, b: 0 }, orchid: { r: .854902, g: .439216, b: .839216 }, palegoldenrod: { r: .933333, g: .909804, b: .666667 }, palegreen: { r: .596078, g: .984314, b: .596078 }, paleturquoise: { r: .686275, g: .933333, b: .933333 }, palevioletred: { r: .858824, g: .439216, b: .576471 }, papayawhip: { r: 1, g: .937255, b: .835294 }, peachpuff: { r: 1, g: .854902, b: .72549 }, peru: { r: .803922, g: .521569, b: .247059 }, pink: { r: 1, g: .752941, b: .796078 }, plum: { r: .866667, g: .627451, b: .866667 }, powderblue: { r: .690196, g: .878431, b: .901961 }, purple: { r: .501961, g: 0, b: .501961 }, red: { r: 1, g: 0, b: 0 }, rosybrown: { r: .737255, g: .560784, b: .560784 }, royalblue: { r: .254902, g: .411765, b: .882353 }, saddlebrown: { r: .545098, g: .270588, b: .07451 }, salmon: { r: .980392, g: .501961, b: .447059 }, sandybrown: { r: .956863, g: .643137, b: .376471 }, seagreen: { r: .180392, g: .545098, b: .341176 }, seashell: { r: 1, g: .960784, b: .933333 }, sienna: { r: .627451, g: .321569, b: .176471 }, silver: { r: .752941, g: .752941, b: .752941 }, skyblue: { r: .529412, g: .807843, b: .921569 }, slateblue: { r: .415686, g: .352941, b: .803922 }, slategray: { r: .439216, g: .501961, b: .564706 }, slategrey: { r: .439216, g: .501961, b: .564706 }, snow: { r: 1, g: .980392, b: .980392 }, springgreen: { r: 0, g: 1, b: .498039 }, steelblue: { r: .27451, g: .509804, b: .705882 }, tan: { r: .823529, g: .705882, b: .54902 }, teal: { r: 0, g: .501961, b: .501961 }, thistle: { r: .847059, g: .74902, b: .847059 }, tomato: { r: 1, g: .388235, b: .278431 }, transparent: { r: 0, g: 0, b: 0, a: 0 }, turquoise: { r: .25098, g: .878431, b: .815686 }, violet: { r: .933333, g: .509804, b: .933333 }, wheat: { r: .960784, g: .870588, b: .701961 }, white: { r: 1, g: 1, b: 1 }, whitesmoke: { r: .960784, g: .960784, b: .960784 }, yellow: { r: 1, g: 1, b: 0 }, yellowgreen: { r: .603922, g: .803922, b: .196078 } }; var ColorInterpolationSpace, webRGBRegex = /^rgb\(\s*((?:(?:25[0-5]|2[0-4]\d|1\d\d|\d{1,2})\s*,\s*){2}(?:25[0-5]|2[0-4]\d|1\d\d|\d{1,2})\s*)\)$/i, webRGBARegex = /^rgba\(\s*((?:(?:25[0-5]|2[0-4]\d|1\d\d|\d{1,2})\s*,\s*){3}(?:0|1|0?\.\d*)\s*)\)$/i, hexRGBRegex = /^#((?:[0-9a-f]{6}|[0-9a-f]{3}))$/i, hexRGBARegex = /^#((?:[0-9a-f]{8}|[0-9a-f]{4}))$/i; function isColorStringHexRGB(e) { return hexRGBRegex.test(e) } function isColorStringHexARGB(e) { return hexRGBARegex.test(e) } function isColorStringHexRGBA(e) { return isColorStringHexARGB(e) } function isColorStringWebRGB(e) { return webRGBRegex.test(e) } function isColorStringWebRGBA(e) { return webRGBARegex.test(e) } function isColorNamed(e) { return FastColors.namedColorsConfigs.hasOwnProperty(e) } function parseColorHexRGB(e) { var r = hexRGBRegex.exec(e); if (null === r) return null; var t = r[1]; if (3 === t.length) { var o = t.charAt(0), n = t.charAt(1), i = t.charAt(2); t = o.concat(o, n, n, i, i) } var a = parseInt(t, 16); return isNaN(a) ? null : new ColorRGBA64(normalize((16711680 & a) >>> 16, 0, 255), normalize((65280 & a) >>> 8, 0, 255), normalize(255 & a, 0, 255), 1) } function parseColorHexARGB(e) { var r = hexRGBARegex.exec(e); if (null === r) return null; var t = r[1]; if (4 === t.length) { var o = t.charAt(0), n = t.charAt(1), i = t.charAt(2), a = t.charAt(3); t = o.concat(o, n, n, i, i, a, a) } var l = parseInt(t, 16); return isNaN(l) ? null : new ColorRGBA64(normalize((16711680 & l) >>> 16, 0, 255), normalize((65280 & l) >>> 8, 0, 255), normalize(255 & l, 0, 255), normalize((4278190080 & l) >>> 24, 0, 255)) } function parseColorHexRGBA(e) { var r = hexRGBARegex.exec(e); if (null === r) return null; var t = r[1]; if (4 === t.length) { var o = t.charAt(0), n = t.charAt(1), i = t.charAt(2), a = t.charAt(3); t = o.concat(o, n, n, i, i, a, a) } var l = parseInt(t, 16); return isNaN(l) ? null : new ColorRGBA64(normalize((4278190080 & l) >>> 24, 0, 255), normalize((16711680 & l) >>> 16, 0, 255), normalize((65280 & l) >>> 8, 0, 255), normalize(255 & l, 0, 255)) } function parseColorWebRGB(e) { var r = webRGBRegex.exec(e); if (null === r) return null; var t = r[1].split(","); return new ColorRGBA64(normalize(Number(t[0]), 0, 255), normalize(Number(t[1]), 0, 255), normalize(Number(t[2]), 0, 255), 1) } function parseColorWebRGBA(e) { var r = webRGBARegex.exec(e); if (null === r) return null; var t = r[1].split(","); return 4 === t.length ? new ColorRGBA64(normalize(Number(t[0]), 0, 255), normalize(Number(t[1]), 0, 255), normalize(Number(t[2]), 0, 255), Number(t[3])) : null } function parseColorNamed(e) { var r = FastColors.namedColorsConfigs[e.toLowerCase()]; return r ? new ColorRGBA64(r.r, r.g, r.b, r.hasOwnProperty("a") ? r.a : void 0) : null } function parseColor(e) { var r = e.toLowerCase(); return isColorStringHexRGB(r) ? parseColorHexRGB(r) : isColorStringHexRGBA(r) ? parseColorHexARGB(r) : isColorStringWebRGB(r) ? parseColorWebRGB(r) : isColorStringWebRGBA(r) ? parseColorWebRGBA(r) : isColorNamed(r) ? parseColorNamed(r) : null } function interpolateRGB(e, r, t) { return isNaN(e) || e <= 0 ? r : e >= 1 ? t : new ColorRGBA64(lerp(e, r.r, t.r), lerp(e, r.g, t.g), lerp(e, r.b, t.b), lerp(e, r.a, t.a)) } function interpolateHSL(e, r, t) { return isNaN(e) || e <= 0 ? r : e >= 1 ? t : new ColorHSL(lerpAnglesInDegrees(e, r.h, t.h), lerp(e, r.s, t.s), lerp(e, r.l, t.l)) } function interpolateHSV(e, r, t) { return isNaN(e) || e <= 0 ? r : e >= 1 ? t : new ColorHSV(lerpAnglesInDegrees(e, r.h, t.h), lerp(e, r.s, t.s), lerp(e, r.v, t.v)) } function interpolateXYZ(e, r, t) { return isNaN(e) || e <= 0 ? r : e >= 1 ? t : new ColorXYZ(lerp(e, r.x, t.x), lerp(e, r.y, t.y), lerp(e, r.z, t.z)) } function interpolateLAB(e, r, t) { return isNaN(e) || e <= 0 ? r : e >= 1 ? t : new ColorLAB(lerp(e, r.l, t.l), lerp(e, r.a, t.a), lerp(e, r.b, t.b)) } function interpolateLCH(e, r, t) { return isNaN(e) || e <= 0 ? r : e >= 1 ? t : new ColorLCH(lerp(e, r.l, t.l), lerp(e, r.c, t.c), lerpAnglesInDegrees(e, r.h, t.h)) } function interpolateByColorSpace(e, r, t, o) { if (isNaN(e) || e <= 0) return t; if (e >= 1) return o; switch (r) { case ColorInterpolationSpace.HSL: return hslToRGB(interpolateHSL(e, rgbToHSL(t), rgbToHSL(o))); case ColorInterpolationSpace.HSV: return hsvToRGB(interpolateHSV(e, rgbToHSV(t), rgbToHSV(o))); case ColorInterpolationSpace.XYZ: return xyzToRGB(interpolateXYZ(e, rgbToXYZ(t), rgbToXYZ(o))); case ColorInterpolationSpace.LAB: return labToRGB(interpolateLAB(e, rgbToLAB(t), rgbToLAB(o))); case ColorInterpolationSpace.LCH: return lchToRGB(interpolateLCH(e, rgbToLCH(t), rgbToLCH(o))); default: return interpolateRGB(e, t, o) } } FastColors.isColorStringHexRGB = isColorStringHexRGB, FastColors.isColorStringHexARGB = isColorStringHexARGB, FastColors.isColorStringHexRGBA = isColorStringHexRGBA, FastColors.isColorStringWebRGB = isColorStringWebRGB, FastColors.isColorStringWebRGBA = isColorStringWebRGBA, FastColors.isColorNamed = isColorNamed, FastColors.parseColorHexRGB = parseColorHexRGB, FastColors.parseColorHexARGB = parseColorHexARGB, FastColors.parseColorHexRGBA = parseColorHexRGBA, FastColors.parseColorWebRGB = parseColorWebRGB, FastColors.parseColorWebRGBA = parseColorWebRGBA, FastColors.parseColorNamed = parseColorNamed, FastColors.parseColor = parseColor, FastColors.interpolateRGB = interpolateRGB, FastColors.interpolateHSL = interpolateHSL, FastColors.interpolateHSV = interpolateHSV, FastColors.interpolateXYZ = interpolateXYZ, FastColors.interpolateLAB = interpolateLAB, FastColors.interpolateLCH = interpolateLCH, function (e) { e[e.RGB = 0] = "RGB", e[e.HSL = 1] = "HSL", e[e.HSV = 2] = "HSV", e[e.XYZ = 3] = "XYZ", e[e.LAB = 4] = "LAB", e[e.LCH = 5] = "LCH" }(ColorInterpolationSpace = FastColors.ColorInterpolationSpace || (FastColors.ColorInterpolationSpace = {})), FastColors.interpolateByColorSpace = interpolateByColorSpace; var ColorBlendMode, ColorScale = function () { function e(e) { if (null == e || 0 === e.length) throw new Error("The stops argument must be non-empty"); this.stops = this.sortColorScaleStops(e) } return e.createBalancedColorScale = function (r) { if (null == r || 0 === r.length) throw new Error("The colors argument must be non-empty"); for (var t = new Array(r.length), o = 0; o < r.length; o++)0 === o ? t[o] = { color: r[o], position: 0 } : o === r.length - 1 ? t[o] = { color: r[o], position: 1 } : t[o] = { color: r[o], position: o * (1 / (r.length - 1)) }; return new e(t) }, e.prototype.getColor = function (e, r) { if (void 0 === r && (r = ColorInterpolationSpace.RGB), 1 === this.stops.length) return this.stops[0].color; if (e <= 0) return this.stops[0].color; if (e >= 1) return this.stops[this.stops.length - 1].color; for (var t = 0, o = 0; o < this.stops.length; o++)this.stops[o].position <= e && (t = o); var n = t + 1; return n >= this.stops.length && (n = this.stops.length - 1), interpolateByColorSpace((e - this.stops[t].position) * (1 / (this.stops[n].position - this.stops[t].position)), r, this.stops[t].color, this.stops[n].color) }, e.prototype.trim = function (r, t, o) { if (void 0 === o && (o = ColorInterpolationSpace.RGB), r < 0 || t > 1 || t < r) throw new Error("Invalid bounds"); if (r === t) return new e([{ color: this.getColor(r, o), position: 0 }]); for (var n = [], i = 0; i < this.stops.length; i++)this.stops[i].position >= r && this.stops[i].position <= t && n.push(this.stops[i]); if (0 === n.length) return new e([{ color: this.getColor(r), position: r }, { color: this.getColor(t), position: t }]); n[0].position !== r && n.unshift({ color: this.getColor(r), position: r }), n[n.length - 1].position !== t && n.push({ color: this.getColor(t), position: t }); var a = t - r, l = new Array(n.length); for (i = 0; i < n.length; i++)l[i] = { color: n[i].color, position: (n[i].position - r) / a }; return new e(l) }, e.prototype.findNextColor = function (e, r, t, o, n, i) { void 0 === t && (t = !1), void 0 === o && (o = ColorInterpolationSpace.RGB), void 0 === n && (n = .005), void 0 === i && (i = 32), isNaN(e) || e <= 0 ? e = 0 : e >= 1 && (e = 1); var a = this.getColor(e, o), l = t ? 0 : 1; if (contrastRatio(a, this.getColor(l, o)) <= r) return l; for (var s = t ? 0 : e, u = t ? e : 0, g = l, c = 0; c <= i;) { g = Math.abs(u - s) / 2 + s; var h = contrastRatio(a, this.getColor(g, o)); if (Math.abs(h - r) <= n) return g; h > r ? t ? s = g : u = g : t ? u = g : s = g, c++ } return g }, e.prototype.clone = function () { for (var r = new Array(this.stops.length), t = 0; t < r.length; t++)r[t] = { color: this.stops[t].color, position: this.stops[t].position }; return new e(r) }, e.prototype.sortColorScaleStops = function (e) { return e.sort(function (e, r) { var t = e.position, o = r.position; return t < o ? -1 : t > o ? 1 : 0 }) }, e }(); function saturateViaLCH(e, r, t) { void 0 === t && (t = 18); var o = rgbToLCH(e), n = o.c + r * t; return n < 0 && (n = 0), lchToRGB(new ColorLCH(o.l, n, o.h)) } function desaturateViaLCH(e, r, t) { return void 0 === t && (t = 18), saturateViaLCH(e, -1 * r, t) } function darkenViaLAB(e, r, t) { void 0 === t && (t = 18); var o = rgbToLAB(e), n = o.l - r * t; return labToRGB(new ColorLAB(n, o.a, o.b)) } function lightenViaLAB(e, r, t) { return void 0 === t && (t = 18), darkenViaLAB(e, -1 * r, t) } function blendBurnChannel(e, r) { return 0 === r ? 0 : 1 - (1 - e) / r } function blendBurn(e, r) { return new ColorRGBA64(blendBurnChannel(e.r, r.r), blendBurnChannel(e.g, r.g), blendBurnChannel(e.b, r.b), 1) } function blendColor(e, r) { var t = rgbToHSL(e), o = rgbToHSL(r); return 0 === o.s ? new ColorRGBA64(t.l, t.l, t.l, 1) : hslToRGB(new ColorHSL(o.h, o.s, t.l)) } function blendDarkenChannel(e, r) { return Math.min(e, r) } function blendDarken(e, r) { return new ColorRGBA64(blendDarkenChannel(e.r, r.r), blendDarkenChannel(e.g, r.g), blendDarkenChannel(e.b, r.b), 1) } function blendDodgeChannel(e, r) { if (r >= 1) return 1; var t = e / (1 - r); return t >= 1 ? 1 : t } function blendDodge(e, r) { return new ColorRGBA64(blendDodgeChannel(e.r, r.r), blendDodgeChannel(e.g, r.g), blendDodgeChannel(e.b, r.b), 1) } function blendLightenChannel(e, r) { return Math.max(e, r) } function blendLighten(e, r) { return new ColorRGBA64(blendLightenChannel(e.r, r.r), blendLightenChannel(e.g, r.g), blendLightenChannel(e.b, r.b), 1) } function blendMultiplyChannel(e, r) { return e * r } function blendMultiply(e, r) { return new ColorRGBA64(blendMultiplyChannel(e.r, r.r), blendMultiplyChannel(e.g, r.g), blendMultiplyChannel(e.b, r.b), 1) } function blendOverlayChannel(e, r) { return clamp(e < .5 ? 2 * r * e : 1 - 2 * (1 - r) * (1 - e), 0, 1) } function blendOverlay(e, r) { return new ColorRGBA64(blendOverlayChannel(e.r, r.r), blendOverlayChannel(e.g, r.g), blendOverlayChannel(e.b, r.b), 1) } function blendScreenChannel(e, r) { return 1 - (1 - r) * (1 - e) } function blendScreen(e, r) { return new ColorRGBA64(blendScreenChannel(e.r, r.r), blendScreenChannel(e.g, r.g), blendScreenChannel(e.b, r.b), 1) } function blend(e, r, t) { switch (e) { case ColorBlendMode.Burn: return blendBurn(r, t); case ColorBlendMode.Color: return blendColor(r, t); case ColorBlendMode.Darken: return blendDarken(r, t); case ColorBlendMode.Dodge: return blendDodge(r, t); case ColorBlendMode.Lighten: return blendLighten(r, t); case ColorBlendMode.Multiply: return blendMultiply(r, t); case ColorBlendMode.Overlay: return blendOverlay(r, t); case ColorBlendMode.Screen: return blendScreen(r, t); default: throw new Error("Unknown blend mode") } } function computeAlphaBlend(e, r) { if (r.a >= 1) return r; if (r.a <= 0) return new ColorRGBA64(e.r, e.g, e.b, 1); var t = r.a * r.r + (1 - r.a) * e.r, o = r.a * r.g + (1 - r.a) * e.g, n = r.a * r.b + (1 - r.a) * e.b; return new ColorRGBA64(t, o, n, 1) } FastColors.ColorScale = ColorScale, FastColors.saturateViaLCH = saturateViaLCH, FastColors.desaturateViaLCH = desaturateViaLCH, FastColors.darkenViaLAB = darkenViaLAB, FastColors.lightenViaLAB = lightenViaLAB, FastColors.blendBurnChannel = blendBurnChannel, FastColors.blendBurn = blendBurn, FastColors.blendColor = blendColor, FastColors.blendDarkenChannel = blendDarkenChannel, FastColors.blendDarken = blendDarken, FastColors.blendDodgeChannel = blendDodgeChannel, FastColors.blendDodge = blendDodge, FastColors.blendLightenChannel = blendLightenChannel, FastColors.blendLighten = blendLighten, FastColors.blendMultiplyChannel = blendMultiplyChannel, FastColors.blendMultiply = blendMultiply, FastColors.blendOverlayChannel = blendOverlayChannel, FastColors.blendOverlay = blendOverlay, FastColors.blendScreenChannel = blendScreenChannel, FastColors.blendScreen = blendScreen, function (e) { e[e.Burn = 0] = "Burn", e[e.Color = 1] = "Color", e[e.Darken = 2] = "Darken", e[e.Dodge = 3] = "Dodge", e[e.Lighten = 4] = "Lighten", e[e.Multiply = 5] = "Multiply", e[e.Overlay = 6] = "Overlay", e[e.Screen = 7] = "Screen" }(ColorBlendMode = FastColors.ColorBlendMode || (FastColors.ColorBlendMode = {})), FastColors.blend = blend, FastColors.computeAlphaBlend = computeAlphaBlend; var ColorSelectorTheme, InputSortMode, TextSelectionMode, GradientSearchMode, ContrastRequirementMode, FaceProcessingMode, ColorPalette = function () { function e(r) { this.config = Object.assign({}, e.defaultPaletteConfig, r), this.palette = [], this.updatePaletteColors() } return e.prototype.updatePaletteGenerationValues = function (e) { var r = !1; for (var t in e) this.config[t] && (this.config[t].equalValue ? this.config[t].equalValue(e[t]) || (this.config[t] = e[t], r = !0) : e[t] !== this.config[t] && (this.config[t] = e[t], r = !0)); return r && this.updatePaletteColors(), r }, e.prototype.updatePaletteColors = function () { for (var e = this.generatePaletteColorScale(), r = 0; r < this.config.steps; r++)this.palette[r] = e.getColor(r / (this.config.steps - 1), this.config.interpolationMode) }, e.prototype.generatePaletteColorScale = function () { var e = rgbToHSL(this.config.baseColor), r = new ColorScale([{ position: 0, color: this.config.scaleColorLight }, { position: .5, color: this.config.baseColor }, { position: 1, color: this.config.scaleColorDark }]).trim(this.config.clipLight, 1 - this.config.clipDark), t = r.getColor(0), o = r.getColor(1); if (e.s >= this.config.saturationAdjustmentCutoff && (t = saturateViaLCH(t, this.config.saturationLight), o = saturateViaLCH(o, this.config.saturationDark)), 0 !== this.config.multiplyLight) { var n = blendMultiply(this.config.baseColor, t); t = interpolateByColorSpace(this.config.multiplyLight, this.config.interpolationMode, t, n) } if (0 !== this.config.multiplyDark) { n = blendMultiply(this.config.baseColor, o); o = interpolateByColorSpace(this.config.multiplyDark, this.config.interpolationMode, o, n) } if (0 !== this.config.overlayLight) { var i = blendOverlay(this.config.baseColor, t); t = interpolateByColorSpace(this.config.overlayLight, this.config.interpolationMode, t, i) } if (0 !== this.config.overlayDark) { i = blendOverlay(this.config.baseColor, o); o = interpolateByColorSpace(this.config.overlayDark, this.config.interpolationMode, o, i) } return this.config.baseScalePosition ? this.config.baseScalePosition <= 0 ? new ColorScale([{ position: 0, color: this.config.baseColor }, { position: 1, color: o.clamp() }]) : this.config.baseScalePosition >= 1 ? new ColorScale([{ position: 0, color: t.clamp() }, { position: 1, color: this.config.baseColor }]) : new ColorScale([{ position: 0, color: t.clamp() }, { position: this.config.baseScalePosition, color: this.config.baseColor }, { position: 1, color: o.clamp() }]) : new ColorScale([{ position: 0, color: t.clamp() }, { position: .5, color: this.config.baseColor }, { position: 1, color: o.clamp() }]) }, e.defaultPaletteConfig = { baseColor: parseColorHexRGB("#808080"), steps: 11, interpolationMode: ColorInterpolationSpace.RGB, scaleColorLight: new ColorRGBA64(1, 1, 1, 1), scaleColorDark: new ColorRGBA64(0, 0, 0, 1), clipLight: .185, clipDark: .16, saturationAdjustmentCutoff: .05, saturationLight: .35, saturationDark: 1.25, overlayLight: 0, overlayDark: .25, multiplyLight: 0, multiplyDark: 0, baseScalePosition: .5 }, e.greyscalePaletteConfig = { baseColor: parseColorHexRGB("#808080"), steps: 11, interpolationMode: ColorInterpolationSpace.RGB, scaleColorLight: new ColorRGBA64(1, 1, 1, 1), scaleColorDark: new ColorRGBA64(0, 0, 0, 1), clipLight: 0, clipDark: 0, saturationAdjustmentCutoff: 0, saturationLight: 0, saturationDark: 0, overlayLight: 0, overlayDark: 0, multiplyLight: 0, multiplyDark: 0, baseScalePosition: .5 }, e }(); function matchLightnessIndex(e, r) { for (var t = rgbToHSL(e), o = Number.MAX_VALUE, n = 0, i = 0; i < r.length; i++) { var a = rgbToHSL(r[i]), l = Math.abs(a.l - t.l); l < o && (o = l, n = i) } return n } function generateOffCenterPalette(e, r, t, o) { void 0 === t && (t = ColorPalette.greyscalePaletteConfig), void 0 === o && (o = ColorPalette.defaultPaletteConfig); var n = matchLightnessIndex(e, new ColorPalette(Object.assign(Object.assign({}, t), { steps: r })).palette); return new ColorPalette(Object.assign(Object.assign({}, o), { steps: r, baseColor: e, baseScalePosition: n / (r - 1) })) } function rescale(e, r, t) { if (e.length <= 1 || r <= 1) throw new Error("The input array and targetSize must both be greater than 1"); if (t && r <= e.length) throw new Error("If preserveInputColors is true then targetSize must be greater than the length of the input array"); var o = new Array(e.length); if (t) for (var n = 0; n < e.length; n++) { for (var i = n / (e.length - 1), a = 2, l = 0, s = 0; s < r; s++) { var u = Math.abs(s / (r - 1) - i); if (u < a && (a = u, l = s), 0 === u) break } o[n] = { color: e[n], position: l / (r - 1) } } else for (n = 0; n < o.length; n++)o[n] = { color: e[n], position: n / (e.length - 1) }; var g = new ColorScale(o), c = new Array(r); for (n = 0; n < r; n++)c[n] = g.getColor(n / (r - 1)); return c } function centeredRescale(e, r) { if (void 0 === r && (r = FastColors.defaultCenteredRescaleConfig), 0 === e.length) return []; var t = Math.floor((r.targetSize - ((e.length - 1) * r.spacing + 1)) / 2); if (t < 0) throw new Error("(targetSize - ((input.length - 1) * spacing + 1)) / 2 must be >= 0"); var o = new Array(e.length + 2); o[0] = { position: 0, color: r.scaleColorLight }, o[o.length - 1] = { position: 1, color: r.scaleColorDark }; for (var n = 0; n < e.length; n++)o[n + 1] = { color: e[n], position: (n * r.spacing + t) / (r.targetSize - 1) }; var i = new ColorScale(o), a = new Array(r.targetSize); for (n = 0; n < r.targetSize; n++)a[n] = i.getColor(n / (r.targetSize - 1)); return a } function generateScaledPalettes(e, r, t) { void 0 === r && (r = 11), void 0 === t && (t = FastColors.defaultCenteredRescaleConfig); var o = generateOffCenterPalette(e, r), n = centeredRescale(o.palette, t); return { short: o.palette, long: n } } function cloneContrastRequirement(e) { return Object.assign({}, e) } function cloneContrastRequirementList(e) { for (var r = [], t = 0; t < e.length; t++)r.push(cloneContrastRequirement(e[t])); return r } function clonePrevalentColorSelectorConfig(e) { return Object.assign(Object.assign({}, e), { hslPreFilters: cloneHSLFilterList(e.hslPreFilters), saturatedRedPreFilter: cloneHSLFilter(e.saturatedRedPreFilter), preferedTextHSLFilter: cloneHSLFilter(e.preferedTextHSLFilter), alternateTextHSLFilter: cloneHSLFilter(e.alternateTextHSLFilter), brownFilter: cloneHSLFilter(e.brownFilter), hslFilters: cloneHSLFilterList(e.hslFilters), labFilters: cloneLABFilterList(e.labFilters), contrastRequirements: cloneContrastRequirementList(e.contrastRequirements) }) } function prevalentColorSelector(e, r) { void 0 === r && (r = FastColors.defaultLightThemePrevalentColorSelectorConfig); var t = []; if (r.denormalizeInput) { for (var o = [], n = 0; n < e.length; n++)o.push({ pixelCount: e[n].pixelCount, colorVolume: e[n].colorVolume, color: new ColorRGBA64(Math.round(255 * e[n].color.r) / 255, Math.round(255 * e[n].color.g) / 255, Math.round(255 * e[n].color.b) / 255, Math.round(255 * e[n].color.a) / 255) }); e = o } var i = checkImageCharacteristics(e = sortInput(e, r), r); t.push("Selecting from " + e.length + " colors. isLight = " + i.isLight + ", isDark = " + i.isDark); for (n = 0; n < e.length; n++)if (t.push("Testing color index " + n + ", " + e[n].color.toStringHexRGB() + ", count: " + e[n].pixelCount), runPreFilters(e[n], r, t)) { var a = runColorTests(e[n], i, r, t); if (null !== a) return t.push("Color index " + n + " passed. Base color " + e[n].color.toStringHexRGB() + ". Final result after adjustment: " + a.toStringHexRGB()), formatOutput({ color: a, pixelCount: e[n].pixelCount, colorVolume: e[n].colorVolume }, i, r, t) } return t.push("Failed to find valid result"), formatOutput(null, i, r, t) } function runPreFilters(e, r, t) { var o = rgbToHSL(e.color).roundToPrecision(5); if (null !== r.saturatedRedPreFilter && !checkHSLFilter(o, r.saturatedRedPreFilter)) return t.push("Failed prefilter id: " + r.saturatedRedPreFilter.id), !1; if (r.hslPreFilters.length > 0) for (var n = 0; n < r.hslPreFilters.length; n++) { if (!checkHSLFilter(o, r.hslPreFilters[n])) return t.push("Failed prefilter index " + n + ", id: " + r.hslPreFilters[n].id), !1 } return !0 } function runColorTests(e, r, t, o) { if (o.push("Testing base color " + e.color.toStringHexRGB()), testSingleColor(e.color, r, t, o)) return o.push("Base color passed"), e.color; var n, i = new ColorPalette(Object.assign(Object.assign({}, ColorPalette.defaultPaletteConfig), { baseColor: e.color, steps: t.gradientSteps })); n = t.gradientSearchMode === GradientSearchMode.Lighter ? t.lighterGradientSearchPattern : t.gradientSearchMode === GradientSearchMode.Darker ? t.darkerGradientSearchPattern : t.alternatingGradientSearchPattern; for (var a = 0; a < n.length; a++)if (o.push("Testing gradient index " + n[a] + ". color: " + i.palette[n[a]].toStringHexRGB()), testSingleColor(i.palette[n[a]], r, t, o)) return o.push("Gradient index " + n[a] + " passed " + i.palette[n[a]].toStringHexRGB()), i.palette[n[a]]; return o.push("Failed to match any gradient shades"), null } function testSingleColor(e, r, t, o) { var n = checkForAlternateTextColor(e, r, t); return o.push("Testing color " + e.toStringHexRGB() + ". isLight = " + r.isLight + ", isDark = " + r.isDark + ". useAlternateTextColor: " + n), !!checkTextColorFilter(e, n, t, o) && (!!checkColorFilters(e, n, t, o) && (!!checkContrastRequirements(e, n, t, o) && !!checkSemiOpaqueContrast(e, n, t, o))) } function checkForAlternateTextColor(e, r, t) { switch (t.textSelectionMode) { case TextSelectionMode.PreferedOnly: return !1; case TextSelectionMode.AlternateOnly: return !0; case TextSelectionMode.PreferedUnlessLightImage: return r.isLight; case TextSelectionMode.PreferedUnlessDarkImage: return r.isDark; case TextSelectionMode.AlternateUnlessLightImage: return !r.isLight; case TextSelectionMode.AlternateUnlessDarkImage: return !r.isDark; case TextSelectionMode.BestContrast: var o = contrastRatio(e, t.preferedTextColor); return contrastRatio(e, t.alternateTextColor) > o }return !1 } function formatOutput(e, r, t, o) { var n, i, a = !1; return null !== e && (n = contrastRatio(e.color, t.preferedTextColor), i = contrastRatio(e.color, t.alternateTextColor), a = checkForAlternateTextColor(e.color, r, t)), { chosenColor: e, preferedTextColorContrast: n, alternateTextColorContrast: i, isLightImage: r.isLight, isDarkImage: r.isDark, useAlternateTextColor: a, config: t, log: o } } function sortInput(e, r) { switch (r.inputSortMode) { case InputSortMode.Count: e.sort(function (e, r) { return e.pixelCount > r.pixelCount ? -1 : e.pixelCount < r.pixelCount ? 1 : 0 }); break; case InputSortMode.Volume: e.sort(function (e, r) { return e.colorVolume > r.colorVolume ? -1 : e.colorVolume < r.colorVolume ? 1 : 0 }); break; case InputSortMode.WeightedSum: e.sort(function (e, t) { var o = r.sortWeightCount * e.pixelCount + r.sortWeightVolume * e.colorVolume, n = r.sortWeightCount * t.pixelCount + r.sortWeightVolume * t.colorVolume; return o > n ? -1 : o < n ? 1 : 0 }); break; case InputSortMode.Product: e.sort(function (e, r) { var t = e.pixelCount * e.colorVolume, o = r.pixelCount * r.colorVolume; return t > o ? -1 : t < o ? 1 : 0 }) }return e } function checkTextColorFilter(e, r, t, o) { var n = 0, i = (n = contrastRatio(r ? t.alternateTextColor : t.preferedTextColor, e)) >= t.requiredTextContrast; return i || o.push("Color " + e.toStringHexRGB() + " failed text color filter contrast: " + n + ", useAlternateTextColor: " + r), i } function checkContrastRequirements(e, r, t, o) { for (var n = 0; n < t.contrastRequirements.length; n++)if (t.contrastRequirements[n].mode === ContrastRequirementMode.Both || t.contrastRequirements[n].mode === ContrastRequirementMode.PreferedTextOnly && !r || t.contrastRequirements[n].mode === ContrastRequirementMode.AlternateTextOnly && r) { var i = contrastRatio(e, t.contrastRequirements[n].color); if (i < t.contrastRequirements[n].ratio) return o.push("Failed contrast requirement index " + n + ", id: " + t.contrastRequirements[n].id + ". contrast: " + i), !1 } return !0 } function checkColorFilters(e, r, t, o) { var n = rgbToHSL(e).roundToPrecision(5); if (r) { if (null !== t.alternateTextHSLFilter && !checkHSLFilter(n, t.alternateTextHSLFilter)) return o.push("Failed HSL filter id: " + t.alternateTextHSLFilter.id), !1 } else if (null !== t.preferedTextHSLFilter && !checkHSLFilter(n, t.preferedTextHSLFilter)) return o.push("Failed HSL filter id: " + t.preferedTextHSLFilter.id), !1; if (null !== t.brownFilter && !checkHSLFilter(n, t.brownFilter)) return o.push("Failed HSL filter id: " + t.brownFilter.id), !1; if (t.hslFilters.length > 0) for (var i = 0; i < t.hslFilters.length; i++) { if (!checkHSLFilter(n, t.hslFilters[i])) return o.push("Failed HSL filter index " + i + ", id: " + t.hslFilters[i].id), !1 } if (t.labFilters.length > 0) { var a = rgbToLAB(e); for (i = 0; i < t.labFilters.length; i++) { if (!checkLABFilter(a, t.labFilters[i])) return o.push("Failed LAB filter index " + i + ", id: " + t.labFilters[i].id), !1 } } return !0 } function checkSemiOpaqueContrast(e, r, t, o) { if (!t.checkSemiOpaqueContrast) return !0; var n = r ? t.alternateTextColor : t.preferedTextColor, i = computeAlphaBlend(n, new ColorRGBA64(e.r, e.g, e.b, t.semiOpaqueContrast)), a = contrastRatio(i, n); return a >= t.requiredTextContrast || (o.push("Failed semi-opaque contrast check. blendedColor: " + i.toStringHexRGB() + ". contrast: " + a), !1) } function checkImageCharacteristics(e, r) { for (var t = 0, o = 0, n = 0, i = 0; i < e.length; i++) { t += e[i].pixelCount; var a = rgbToRelativeLuminance(e[i].color); a > r.lightColorThreshold && (o += e[i].pixelCount), a < r.darkColorThreshold && (n += e[i].pixelCount) } return { isLight: o / t >= r.lightImageThreshold, isDark: n / t >= r.darkImageThreshold } } function extractPalette(e, r) { if (void 0 === r && (r = FastColors.defaultPaletteExtractionConfig), 0 === r.constraints.length) return []; for (var t = 0, o = 0, n = 0; n < e.length; n++)t += e[n].pixelCount, o += e[n].colorVolume; var i = new Array(r.constraints.length), a = new Array(r.constraints.length); for (n = 0; n < i.length; n++)a[n] = 0, i[n] = { found: !1, constraint: r.constraints[n] }; var l = r.saturationWeight + r.luminosityWeight + r.populationWeight + r.volumeWeight; for (n = 0; n < e.length; n++)for (var s = rgbToHSL(e[n].color), u = 0; u < r.constraints.length; u++)if (s.s >= r.constraints[u].minSaturation && s.s <= r.constraints[u].maxSaturation && s.l >= r.constraints[u].minLuminosity && s.l <= r.constraints[u].maxLuminosity) { var g = e[n].pixelCount / t, c = e[n].colorVolume / o, h = 1 - Math.abs(s.s - r.constraints[u].targetSaturation), d = 1 - Math.abs(s.l - r.constraints[u].targetLuminosity), C = (g * r.populationWeight + c * r.volumeWeight + h * r.saturationWeight + d * r.luminosityWeight) / l; if (C > a[u]) { for (var m = !1, f = 0; f < u; f++)if (i[f].found && i[f].color.color.equalValue(e[n].color)) { m = !0; break } m || (a[u] = C, i[u].found = !0, i[u].color = e[n]) } } return i } function loadFileAsDataUrl(e) { return __awaiter(this, void 0, void 0, function () { return __generator(this, function (r) { return [2, new Promise(function (r, t) { var o = new FileReader; o.onabort = function () { t("Load Aborted") }, o.onerror = function () { t(o.error) }, o.onload = function () { r(o.result) }, o.readAsDataURL(e) })] }) }) } function loadFileAsArrayBuffer(e) { return __awaiter(this, void 0, void 0, function () { return __generator(this, function (r) { return [2, new Promise(function (r, t) { var o = new FileReader; o.onabort = function () { t("Load Aborted") }, o.onerror = function () { t(o.error) }, o.onload = function () { r(o.result) }, o.readAsArrayBuffer(e) })] }) }) } function extractColorFromUrl(e, r) { return void 0 === r && (r = FastColors.defaultExtractColorConfig), __awaiter(this, void 0, void 0, function () { var t; return __generator(this, function (o) { switch (o.label) { case 0: return [4, fetch(e)]; case 1: return [4, o.sent().blob()]; case 2: return t = o.sent(), [2, extractColorFromFile(new File([t], "image.jpg", { type: t.type }), r)] } }) }) } function extractColorFromFile(e, r) { return void 0 === r && (r = FastColors.defaultExtractColorConfig), __awaiter(this, void 0, void 0, function () { var t, o, n, i, a, l, s; return __generator(this, function (u) { switch (u.label) { case 0: return [4, loadFileAsDataUrl(e)]; case 1: if (t = u.sent(), o = { loadFailure: !0, imageDataUrl: "", quantizedColors: [], imagePalette: [], chosenColor: null, useAlternateTextColor: !1, isLightImage: !1 }, null === t) return [2, o]; u.label = 2; case 2: return u.trys.push([2, 4, , 5]), [4, loadImageData(t)]; case 3: return n = u.sent(), [3, 5]; case 4: return u.sent(), [2, o]; case 5: return i = new ImageDataPixelBlob(n), new Histogram(i, r.histogramSignifigantBits, r.histogramPixelSkipping, r.isHistogramPixelValid), [], a = quantize(i, r.quantizeConfig), l = r.paletteExtraction ? extractPalette(a, r.paletteExtractionConfig) : [], s = prevalentColorSelector(a, r.colorSelectorConfig), [2, { loadFailure: !1, imageDataUrl: t, quantizedColors: a, imagePalette: l, chosenColor: s.chosenColor, preferedTextColorContrast: s.preferedTextColorContrast, alternateTextColorContrast: s.alternateTextColorContrast, useAlternateTextColor: s.useAlternateTextColor, isLightImage: s.isLightImage }] } }) }) } function dataURLtoFile(e) { for (var r = e.split(","), t = r[0].match(/:(.*?);/)[1], o = atob(r[1]), n = o.length, i = new Uint8Array(n); n--;)i[n] = o.charCodeAt(n); var a = new Blob([i], { type: t }); return new File([a], "image.jpg", { type: a.type }) } FastColors.ColorPalette = ColorPalette, FastColors.matchLightnessIndex = matchLightnessIndex, FastColors.generateOffCenterPalette = generateOffCenterPalette, FastColors.rescale = rescale, FastColors.defaultCenteredRescaleConfig = { targetSize: 63, spacing: 4, scaleColorLight: ColorPalette.defaultPaletteConfig.scaleColorLight, scaleColorDark: ColorPalette.defaultPaletteConfig.scaleColorDark }, FastColors.centeredRescale = centeredRescale, FastColors.generateScaledPalettes = generateScaledPalettes, function (e) { e[e.Light = 0] = "Light", e[e.Dark = 1] = "Dark" }(ColorSelectorTheme = FastColors.ColorSelectorTheme || (FastColors.ColorSelectorTheme = {})), function (e) { e[e.None = 0] = "None", e[e.Count = 1] = "Count", e[e.Volume = 2] = "Volume", e[e.WeightedSum = 3] = "WeightedSum", e[e.Product = 4] = "Product" }(InputSortMode = FastColors.InputSortMode || (FastColors.InputSortMode = {})), function (e) { e[e.PreferedOnly = 0] = "PreferedOnly", e[e.AlternateOnly = 1] = "AlternateOnly", e[e.BestContrast = 2] = "BestContrast", e[e.PreferedUnlessLightImage = 3] = "PreferedUnlessLightImage", e[e.PreferedUnlessDarkImage = 4] = "PreferedUnlessDarkImage", e[e.AlternateUnlessLightImage = 5] = "AlternateUnlessLightImage", e[e.AlternateUnlessDarkImage = 6] = "AlternateUnlessDarkImage" }(TextSelectionMode = FastColors.TextSelectionMode || (FastColors.TextSelectionMode = {})), function (e) { e[e.Lighter = 0] = "Lighter", e[e.Darker = 1] = "Darker", e[e.Alternating = 2] = "Alternating" }(GradientSearchMode = FastColors.GradientSearchMode || (FastColors.GradientSearchMode = {})), function (e) { e[e.Both = 0] = "Both", e[e.PreferedTextOnly = 1] = "PreferedTextOnly", e[e.AlternateTextOnly = 2] = "AlternateTextOnly" }(ContrastRequirementMode = FastColors.ContrastRequirementMode || (FastColors.ContrastRequirementMode = {})), FastColors.cloneContrastRequirement = cloneContrastRequirement, FastColors.cloneContrastRequirementList = cloneContrastRequirementList, FastColors.clonePrevalentColorSelectorConfig = clonePrevalentColorSelectorConfig, FastColors.preferedTextHSLFilter = Object.freeze({ id: "preferedTextHSLFilter", minS: .08, maxS: .86, minL: .12, maxL: .98 }), FastColors.alternateTextHSLFilter = Object.freeze({ id: "alternateTextHSLFilter", minS: .01, maxS: 1, minL: .78, maxL: .97 }), FastColors.brownColorFilter = Object.freeze({ id: "brownColorFilter", invert: !0, minH: .05, maxH: 32, minS: 0, maxS: 1, minL: 0, maxL: 1 }), FastColors.saturatedRedColorFilter = Object.freeze({ id: "saturatedRedColorFilter", invert: !0, minH: 355, minS: .4, maxL: .4 }), FastColors.emojiContrastYellowLight = Object.freeze({ id: "Yellow Emoji Light", mode: ContrastRequirementMode.PreferedTextOnly, ratio: 3, color: parseColor("#FDCC55") }), FastColors.emojiContrastYellowDark = Object.freeze({ id: "Yellow Emoji Dark", mode: ContrastRequirementMode.AlternateTextOnly, ratio: 3, color: parseColor("#B0640C") }), FastColors.emojiContrastRedLight = Object.freeze({ id: "Red Emoji Light", mode: ContrastRequirementMode.PreferedTextOnly, ratio: 3, color: parseColor("#FE7D73") }), FastColors.emojiContrastRedDark = Object.freeze({ id: "Red Emoji Dark", mode: ContrastRequirementMode.AlternateTextOnly, ratio: 3, color: parseColor("#D13225") }), FastColors.defaultLightThemePrevalentColorSelectorConfig = Object.freeze({ theme: ColorSelectorTheme.Light, denormalizeInput: !0, textSelectionMode: TextSelectionMode.PreferedUnlessLightImage, inputSortMode: InputSortMode.Count, sortWeightCount: 1, sortWeightVolume: 1, lightColorThreshold: .5, lightImageThreshold: .25, darkColorThreshold: .1, darkImageThreshold: .5, preferedTextColor: new ColorRGBA64(1, 1, 1), alternateTextColor: new ColorRGBA64(0, 0, 0), hslPreFilters: [], saturatedRedPreFilter: Object.freeze(Object.assign({}, FastColors.saturatedRedColorFilter)), preferedTextHSLFilter: Object.freeze(Object.assign({}, FastColors.preferedTextHSLFilter)), alternateTextHSLFilter: Object.freeze(Object.assign({}, FastColors.alternateTextHSLFilter)), brownFilter: Object.freeze(Object.assign({}, FastColors.brownColorFilter)), hslFilters: [], labFilters: [], gradientSearchMode: GradientSearchMode.Alternating, gradientSteps: 11, lighterGradientSearchPattern: [4, 3, 2, 1, 0], darkerGradientSearchPattern: [6, 7, 8, 9, 10], alternatingGradientSearchPattern: [6, 4, 7, 3, 8, 2, 9, 1, 10, 0], contrastRequirements: [FastColors.emojiContrastYellowLight, FastColors.emojiContrastYellowDark, FastColors.emojiContrastRedLight, FastColors.emojiContrastRedDark], checkSemiOpaqueContrast: !0, semiOpaqueContrast: .8, requiredTextContrast: 4.5 }), FastColors.defaultDarkThemePrevalentColorSelectorConfig = Object.freeze(Object.assign(Object.assign({}, clonePrevalentColorSelectorConfig(FastColors.defaultLightThemePrevalentColorSelectorConfig)), { theme: ColorSelectorTheme.Dark, textSelectionMode: TextSelectionMode.AlternateUnlessDarkImage })), FastColors.flightWhiteTextOnlyConfig = Object.freeze(Object.assign(Object.assign({}, clonePrevalentColorSelectorConfig(FastColors.defaultLightThemePrevalentColorSelectorConfig)), { textSelectionMode: TextSelectionMode.PreferedOnly })), FastColors.flightPreferWhiteTextConfig = Object.freeze(Object.assign(Object.assign({}, clonePrevalentColorSelectorConfig(FastColors.defaultLightThemePrevalentColorSelectorConfig)), { textSelectionMode: TextSelectionMode.PreferedUnlessLightImage })), FastColors.flightBestContrastConfig = Object.freeze(Object.assign(Object.assign({}, clonePrevalentColorSelectorConfig(FastColors.defaultLightThemePrevalentColorSelectorConfig)), { textSelectionMode: TextSelectionMode.BestContrast })), FastColors.flightPreferBlackTextConfig = Object.freeze(Object.assign(Object.assign({}, clonePrevalentColorSelectorConfig(FastColors.defaultLightThemePrevalentColorSelectorConfig)), { textSelectionMode: TextSelectionMode.AlternateUnlessDarkImage })), FastColors.flightBlackTextOnlyConfig = Object.freeze(Object.assign(Object.assign({}, clonePrevalentColorSelectorConfig(FastColors.defaultLightThemePrevalentColorSelectorConfig)), { textSelectionMode: TextSelectionMode.AlternateOnly })), FastColors.prevalentColorSelector = prevalentColorSelector, FastColors.runPreFilters = runPreFilters, FastColors.runColorTests = runColorTests, FastColors.testSingleColor = testSingleColor, FastColors.extractPalette = extractPalette, function (e) { e[e.None = 0] = "None", e[e.Subtract = 1] = "Subtract", e[e.Cutoff = 2] = "Cutoff", e[e.Add = 3] = "Add" }(FaceProcessingMode = FastColors.FaceProcessingMode || (FastColors.FaceProcessingMode = {})), FastColors.defaultExtractColorConfig = { detectFaces: !1, faceProcessingMode: FaceProcessingMode.None, faceProcessingCutoffThreshold: 2 }, FastColors.loadFileAsDataUrl = loadFileAsDataUrl, FastColors.loadFileAsArrayBuffer = loadFileAsArrayBuffer, FastColors.extractColorFromUrl = extractColorFromUrl, FastColors.extractColorFromFile = extractColorFromFile, FastColors.dataURLtoFile = dataURLtoFile; export { FastColors };